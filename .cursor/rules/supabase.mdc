---
description: 
globs: 
---
# Supabase Rules
# Inherits from: root.mdc
# Globs: apps/web/**/*.{ts,tsx}
# Description: Production-grade Supabase patterns
1. Implement RLS policies with auth.uid() claims for security.
   # Example: CREATE POLICY user_isolation ON users FOR SELECT USING (auth.uid() = user_id);
2. Use pg_graphql for type-safe GraphQL queries.
   # Example: supabase.graphql.query({ query: '{ users { id } }' });
3. Apply row-level security with service key patterns.
   # Example: Use service_role key for admin operations.
4. Implement realtime subscriptions with channel filters.
   # Example: supabase.channel('public.users').on('INSERT', handler);
5. Use supabase-js v2 with TypeScript definitions.
   # Example: import { createClient } from '@supabase/supabase-js';
6. Apply database migrations via CLI version control.
   # Example: supabase migration new --name add_users_table.
7. Implement edge functions with Deno runtime.
   # Example: Deno runtime for serverless functions; see supabase edge functions docs.
8. Use Postgres enums for type-safe column values.
   # Example: CREATE TYPE status AS ENUM ('active', 'inactive');
9. Apply query optimization with explain() analysis.
   # Example: EXPLAIN SELECT * FROM users WHERE status = 'active';
10. Implement connection pooling with PgBouncer.
    # Example: Configure PgBouncer for Supabase connections.
# AI Validation: Check for missing RLS policies or inefficient queries.
# Update monthly with Cursor AI: Review Supabase v3+ updates and security patches.